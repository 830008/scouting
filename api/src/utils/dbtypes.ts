import { z } from "zod";

export const Alliance = ["Red", "Blue"] as const;

export const CommonEntrySchema = z.object({
  eventKey: z.string(),
  matchKey: z.string(),
  teamNumber: z.number().int().nonnegative(),
  alliance: z.union([z.literal("Red"), z.literal("Blue")]),
  robotNumber: z.union([
    z.literal(1),
    z.literal(2),
    z.literal(3),
    z.literal(4),
  ]),
  deviceTeamNumber: z.number().int().nonnegative(),
  deviceId: z.string(),
  scoutTeamNumber: z.number().int().nonnegative(),
  scoutName: z.string(),
  flag: z.string(),
});
export type CommonEntry = z.infer<typeof CommonEntrySchema>;
export type CommonEntryColumn = keyof CommonEntry;
export const CommonEntryColumns: CommonEntryColumn[] = [
  "eventKey",
  "matchKey",
  "teamNumber",
  "alliance",
  "robotNumber",
  "deviceTeamNumber",
  "deviceId",
  "scoutTeamNumber",
  "scoutName",
  "flag",
] as CommonEntryColumn[];

export const TeamMatchEntrySchema = CommonEntrySchema.omit({
  robotNumber: true,
}).extend({
  robotNumber: z.union([z.literal(1), z.literal(2), z.literal(3)]),

  noShow: z.boolean(),
  startingLocation: z.union([
    z.literal(""),
    z.literal("A"),
    z.literal("B"),
    z.literal("C"),
  ]),
  died: z.boolean(),
  playedDefense: z.boolean(),
  goodAtCoralL1: z.boolean(),
  goodAtCoralL2: z.boolean(),
  goodAtCoralL3: z.boolean(),
  goodAtCoralL4: z.boolean(),
  goodAtAlgaeNet: z.boolean(),
  goodAtAlgaeProcessor: z.boolean(),
  goodAtClimb: z.boolean(),
  goodAtDefense: z.boolean(),
  goodAtWorkingWithAlliance: z.boolean(),
  goodAtDriving: z.boolean(),
  goodAtAuto: z.boolean(),
  comments: z.string(),

  autoCrossedRSL: z.boolean(),
  autoCoralAL1: z.number().int().nonnegative(),
  autoCoralAL2: z.number().int().nonnegative(),
  autoCoralAL3: z.number().int().nonnegative(),
  autoCoralAL4: z.number().int().nonnegative(),
  autoCoralBL1: z.number().int().nonnegative(),
  autoCoralBL2: z.number().int().nonnegative(),
  autoCoralBL3: z.number().int().nonnegative(),
  autoCoralBL4: z.number().int().nonnegative(),
  autoCoralCL1: z.number().int().nonnegative(),
  autoCoralCL2: z.number().int().nonnegative(),
  autoCoralCL3: z.number().int().nonnegative(),
  autoCoralCL4: z.number().int().nonnegative(),
  autoCoralDL1: z.number().int().nonnegative(),
  autoCoralDL2: z.number().int().nonnegative(),
  autoCoralDL3: z.number().int().nonnegative(),
  autoCoralDL4: z.number().int().nonnegative(),
  autoCoralEL1: z.number().int().nonnegative(),
  autoCoralEL2: z.number().int().nonnegative(),
  autoCoralEL3: z.number().int().nonnegative(),
  autoCoralEL4: z.number().int().nonnegative(),
  autoCoralFL1: z.number().int().nonnegative(),
  autoCoralFL2: z.number().int().nonnegative(),
  autoCoralFL3: z.number().int().nonnegative(),
  autoCoralFL4: z.number().int().nonnegative(),
  autoCoralGL1: z.number().int().nonnegative(),
  autoCoralGL2: z.number().int().nonnegative(),
  autoCoralGL3: z.number().int().nonnegative(),
  autoCoralGL4: z.number().int().nonnegative(),
  autoCoralHL1: z.number().int().nonnegative(),
  autoCoralHL2: z.number().int().nonnegative(),
  autoCoralHL3: z.number().int().nonnegative(),
  autoCoralHL4: z.number().int().nonnegative(),
  autoCoralIL1: z.number().int().nonnegative(),
  autoCoralIL2: z.number().int().nonnegative(),
  autoCoralIL3: z.number().int().nonnegative(),
  autoCoralIL4: z.number().int().nonnegative(),
  autoCoralJL1: z.number().int().nonnegative(),
  autoCoralJL2: z.number().int().nonnegative(),
  autoCoralJL3: z.number().int().nonnegative(),
  autoCoralJL4: z.number().int().nonnegative(),
  autoCoralKL1: z.number().int().nonnegative(),
  autoCoralKL2: z.number().int().nonnegative(),
  autoCoralKL3: z.number().int().nonnegative(),
  autoCoralKL4: z.number().int().nonnegative(),
  autoCoralLL1: z.number().int().nonnegative(),
  autoCoralLL2: z.number().int().nonnegative(),
  autoCoralLL3: z.number().int().nonnegative(),
  autoCoralLL4: z.number().int().nonnegative(),
  autoProcessor: z.number().int().nonnegative(),
  autoNet: z.number().int().nonnegative(),
  autoRemovedAlgaeFromReef: z.boolean(),

  teleopL1: z.number().int().nonnegative(),
  teleopL2: z.number().int().nonnegative(),
  teleopL3: z.number().int().nonnegative(),
  teleopL4: z.number().int().nonnegative(),
  teleopProcessor: z.number().int().nonnegative(),
  teleopNet: z.number().int().nonnegative(),
  teleopRemovedAlgaeFromReef: z.boolean(),
  teleopPark: z.boolean(),
  teleopAttemptedShallow: z.boolean(),
  teleopAttemptedDeep: z.boolean(),
  teleopSuccessfulShallow: z.boolean(),
  teleopSuccessfulDeep: z.boolean(),
});
export type TeamMatchEntry = z.infer<typeof TeamMatchEntrySchema>;
export type TeamMatchEntryColumn = keyof TeamMatchEntry;
export const TeamMatchEntryColumns: TeamMatchEntryColumn[] = [
  ...CommonEntryColumns,

  "noShow",
  "startingLocation",
  "died",
  "playedDefense",
  "goodAtCoralL1",
  "goodAtCoralL2",
  "goodAtCoralL3",
  "goodAtCoralL4",
  "goodAtAlgaeNet",
  "goodAtAlgaeProcessor",
  "goodAtClimb",
  "goodAtDefense",
  "goodAtWorkingWithAlliance",
  "goodAtDriving",
  "goodAtAuto",
  "comments",

  "autoCrossedRSL",
  "autoCoralAL1",
  "autoCoralAL2",
  "autoCoralAL3",
  "autoCoralAL4",
  "autoCoralBL1",
  "autoCoralBL2",
  "autoCoralBL3",
  "autoCoralBL4",
  "autoCoralCL1",
  "autoCoralCL2",
  "autoCoralCL3",
  "autoCoralCL4",
  "autoCoralDL1",
  "autoCoralDL2",
  "autoCoralDL3",
  "autoCoralDL4",
  "autoCoralEL1",
  "autoCoralEL2",
  "autoCoralEL3",
  "autoCoralEL4",
  "autoCoralFL1",
  "autoCoralFL2",
  "autoCoralFL3",
  "autoCoralFL4",
  "autoCoralGL1",
  "autoCoralGL2",
  "autoCoralGL3",
  "autoCoralGL4",
  "autoCoralHL1",
  "autoCoralHL2",
  "autoCoralHL3",
  "autoCoralHL4",
  "autoCoralIL1",
  "autoCoralIL2",
  "autoCoralIL3",
  "autoCoralIL4",
  "autoCoralJL1",
  "autoCoralJL2",
  "autoCoralJL3",
  "autoCoralJL4",
  "autoCoralKL1",
  "autoCoralKL2",
  "autoCoralKL3",
  "autoCoralKL4",
  "autoCoralLL1",
  "autoCoralLL2",
  "autoCoralLL3",
  "autoCoralLL4",
  "autoProcessor",
  "autoNet",
  "autoRemovedAlgaeFromReef",

  "teleopL1",
  "teleopL2",
  "teleopL3",
  "teleopL4",
  "teleopProcessor",
  "teleopNet",
  "teleopRemovedAlgaeFromReef",
  "teleopAttemptedClimb",
  "teleopSuccessfulClimb",
] as TeamMatchEntryColumn[];
export const TeamMatchEntryInit: TeamMatchEntry = {
  eventKey: "",
  matchKey: "qm1",
  teamNumber: 0,
  alliance: "Red",
  robotNumber: 1,
  deviceTeamNumber: 0,
  deviceId: "",
  scoutTeamNumber: 0,
  scoutName: "",
  flag: "",

  noShow: false,
  startingLocation: "",
  died: false,
  playedDefense: false,
  goodAtCoralL1: false,
  goodAtCoralL2: false,
  goodAtCoralL3: false,
  goodAtCoralL4: false,
  goodAtAlgaeNet: false,
  goodAtAlgaeProcessor: false,
  goodAtClimb: false,
  goodAtDefense: false,
  goodAtWorkingWithAlliance: false,
  goodAtDriving: false,
  goodAtAuto: false,
  comments: "",

  autoCrossedRSL: false,
  autoCoralAL1: 0,
  autoCoralAL2: 0,
  autoCoralAL3: 0,
  autoCoralAL4: 0,
  autoCoralBL1: 0,
  autoCoralBL2: 0,
  autoCoralBL3: 0,
  autoCoralBL4: 0,
  autoCoralCL1: 0,
  autoCoralCL2: 0,
  autoCoralCL3: 0,
  autoCoralCL4: 0,
  autoCoralDL1: 0,
  autoCoralDL2: 0,
  autoCoralDL3: 0,
  autoCoralDL4: 0,
  autoCoralEL1: 0,
  autoCoralEL2: 0,
  autoCoralEL3: 0,
  autoCoralEL4: 0,
  autoCoralFL1: 0,
  autoCoralFL2: 0,
  autoCoralFL3: 0,
  autoCoralFL4: 0,
  autoCoralGL1: 0,
  autoCoralGL2: 0,
  autoCoralGL3: 0,
  autoCoralGL4: 0,
  autoCoralHL1: 0,
  autoCoralHL2: 0,
  autoCoralHL3: 0,
  autoCoralHL4: 0,
  autoCoralIL1: 0,
  autoCoralIL2: 0,
  autoCoralIL3: 0,
  autoCoralIL4: 0,
  autoCoralJL1: 0,
  autoCoralJL2: 0,
  autoCoralJL3: 0,
  autoCoralJL4: 0,
  autoCoralKL1: 0,
  autoCoralKL2: 0,
  autoCoralKL3: 0,
  autoCoralKL4: 0,
  autoCoralLL1: 0,
  autoCoralLL2: 0,
  autoCoralLL3: 0,
  autoCoralLL4: 0,
  autoProcessor: 0,
  autoNet: 0,
  autoRemovedAlgaeFromReef: false,

  teleopL1: 0,
  teleopL2: 0,
  teleopL3: 0,
  teleopL4: 0,
  teleopProcessor: 0,
  teleopNet: 0,
  teleopRemovedAlgaeFromReef: false,
  teleopAttemptedClimb: false,
  teleopSuccessfulClimb: false,
};

export const HumanPlayerEntrySchema = CommonEntrySchema.omit({
  robotNumber: true,
}).extend({
  robotNumber: z.literal(4),

  humanAttemptedNet: z.number().int().nonnegative(),
  humanSuccessfulNet: z.number().int().nonnegative(),
  comments: z.string(),
});
export type HumanPlayerEntry = z.infer<typeof HumanPlayerEntrySchema>;
export type HumanPlayerEntryColumn = keyof HumanPlayerEntry;
export const HumanPlayerEntryColumns: HumanPlayerEntryColumn[] = [
  ...CommonEntryColumns,

  "humanAttemptedNet",
  "humanSuccessfulNet",
  "comments",
] as HumanPlayerEntryColumn[];
export const HumanPlayerEntryInit: HumanPlayerEntry = {
  eventKey: "",
  matchKey: "qm1",
  teamNumber: 0,
  alliance: "Red",
  robotNumber: 4,
  deviceTeamNumber: 0,
  deviceId: "",
  scoutTeamNumber: 0,
  scoutName: "",
  flag: "",

  humanAttemptedNet: 0,
  humanSuccessfulNet: 0,
  comments: "",
};

export const UserPermLevel = [
  "none",
  "demo",
  "team",
  "datamanage",
  "admin",
] as const;
export type User = {
  username: string;
  permLevel: (typeof UserPermLevel)[number];
  hashedPassword: string;
};
export const UserColumns = ["username", "permLevel", "hashedPassword"] as const;
export type UserColumn = (typeof UserColumns)[number];

export type DBEvent = {
  eventKey: string;
  eventName: string;
};
export type Match = {
  eventKey: string;
  matchKey: string;
  red1: number;
  red2: number;
  red3: number;
  blue1: number;
  blue2: number;
  blue3: number;
};
export const MatchColumns = [
  "eventKey",
  "matchKey",
  "red1",
  "red2",
  "red3",
  "blue1",
  "blue2",
  "blue3",
] as const;
export type MatchColumn = (typeof MatchColumns)[number];
